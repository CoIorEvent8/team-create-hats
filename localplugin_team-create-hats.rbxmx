<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBX9BBEED9FEC3248D48C9E298AE447B816">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">tchatsv3</string>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="LocalScript" referent="RBX3E32BAF2C8C54A19A7C712E80820D7EC">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">main</string>
				<string name="ScriptGuid">{359F3A80-5305-4652-BABB-E7D446AC5792}</string>
				<ProtectedString name="Source"><![CDATA[-- main script, starts all modules

local Prechecks = require(script.prechecks)

if Prechecks.shouldRun() then

	_G.plugin_990908723 = plugin -- apparently plugin doesn't work within a module script
	
	local Settings = require(script.settings)
	Settings.CheckForFirstTimeUseAndSetUp() -- checks for new users and sets default settings
	
	require(script.gui) -- sets up and runs guis
	require(script.changeproperty) -- sets up and runs properties
	
	local HatUpdate = require(script.hatupdate)
	
	
	if Settings.GetEnabled() then
		HatUpdate.Connect()
	end
	
	_G.plugin_990908723.Unloading:Connect(function()
		HatUpdate.Disconnect()
	end)

end]]></ProtectedString>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXF6F73F22C5B44546B106181D509F47D9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">gui</string>
					<string name="ScriptGuid">{CBF5F9BE-7DCA-485E-B17F-FCD491A8DF16}</string>
					<ProtectedString name="Source"><![CDATA[-- handles all guis
local Guis = {}

-- these guis are part of studio
Guis.Toolbar = _G.plugin_990908723:CreateToolbar("Team Create Hats")
Guis.ToggleWindow = Guis.Toolbar:CreateButton("Change Hat", "change hat properties", "rbxassetid://692849427")
Guis.Docket = _G.plugin_990908723:CreateDockWidgetPluginGui(
    "Team Create Hats", 
    DockWidgetPluginGuiInfo.new(Enum.InitialDockState.Float, false, false, 200, 150)
)
Guis.Docket.Title = "Team Create Hat Properties"
Guis.ToggleWindow:SetActive(Guis.Docket.Enabled)

Guis.ToggleWindow.Click:Connect(function()
    Guis.Docket.Enabled = not Guis.Docket.Enabled
    Guis.ToggleWindow:SetActive(Guis.Docket.Enabled)
end)

-- these guis are within the docket window
local studioWidgets = require(1638103268)

local LabeledCheckboxClass = studioWidgets.LabeledCheckbox
local LabeledTextInputClass = studioWidgets.LabeledTextInput
local CollapsibleTitledSectionClass = studioWidgets.CollapsibleTitledSection
local GuiUtil = studioWidgets.GuiUtilities

local MainSection = CollapsibleTitledSectionClass.new("HatProperties", "Hat Properties", true, true)
MainSection:GetSectionFrame().Parent = Guis.Docket

local Settings = require(script.Parent.settings)

Guis.TextboxHatID         = LabeledTextInputClass.new("HatID",       "AccessoryId",  tostring(Settings.GetHatId()))
Guis.TextboxHeight        = LabeledTextInputClass.new("Height",      "Height",       tostring(Settings.GetHeight()))
Guis.CheckboxTransparency = LabeledCheckboxClass.new ("Transparent", "VisibleLocal", (Settings.GetTransparency() == 0), true)
Guis.CheckboxEnabled      = LabeledCheckboxClass.new ("Enabled",     "Enabled",      Settings.GetEnabled(),             true)

local function SetGuisInSection(objs, section)
	local background = Instance.new("Frame")
	background.BackgroundColor3 = objs[1]:GetFrame().BackgroundColor3
	background.Size = UDim2.new(1, 0, 1, 0)
	background.ZIndex = -10
	background.Parent = Guis.Docket
	GuiUtil.syncGuiElementBackgroundColor(background)

	for i, obj in pairs(objs)do
		local Frame = obj:GetFrame()
		Frame.Position = UDim2.new(0, 0, 0, 30 * (i - 1))
		Frame.Parent = section:GetContentsFrame()
	end
end

SetGuisInSection({Guis.TextboxHatID, Guis.TextboxHeight, Guis.CheckboxTransparency, Guis.CheckboxEnabled}, MainSection)

-- removes everything that isn't a number from a string
function Guis.FilterToWholeNumber(textbox, value)
	textbox:SetValue(value:gsub('%D',''))
end

-- removes everything that isn't a number, -, or . from the string (- is removed if it occurs anywhere other than the beginning)
function Guis.FilterToNumber(textbox, value)
	local NumericString = value:match("%d[%d.]*") or ""
	if value:sub(1,1) == "-" then
		NumericString = "-" .. NumericString
	end
	textbox:SetValue(NumericString)
end

Guis.TextboxHatID:SetValueChangedFunction(function(value)
    Guis.FilterToWholeNumber(Guis.TextboxHatID, value)
end)

Guis.TextboxHeight:SetValueChangedFunction(function(value)
    Guis.FilterToNumber(Guis.TextboxHeight, value)
end)

return Guis]]></ProtectedString>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX0A63567561B74EC2B9F6FAC236465202">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">prechecks</string>
					<string name="ScriptGuid">{957C7749-A756-4F95-BD0C-23923EBF68FB}</string>
					<ProtectedString name="Source"><![CDATA[-- does preliminary checks to see if the plugin should run

local Prechecks = {}

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

function Prechecks.shouldRun()
    return (RunService:IsEdit()) and -- determines if the game is running
           (Players.LocalPlayer ~= nil) -- determines if team create is active
end

return Prechecks]]></ProtectedString>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXEC0706B6079844989B025D6E8A967244">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">settings</string>
					<string name="ScriptGuid">{2573FAA2-AB86-49B3-8F53-A7D7A3566381}</string>
					<ProtectedString name="Source"><![CDATA[-- manages settings and stores values of settings
local Settings = {}

local hatid = _G.plugin_990908723:GetSetting("HatID")
local height = _G.plugin_990908723:GetSetting("Height")
local transparency = _G.plugin_990908723:GetSetting("Transparency")
local enabled = _G.plugin_990908723:GetSetting("Enabled")

-- checks if any settings aren't nil, if all are nil (user has never used the plugin) it enables the plugin and sets default settings
function Settings.CheckForFirstTimeUseAndSetUp()
    if not hatid then
        Settings.SetHatId(1028826)
    end

    if not height then
        Settings.SetHeight(5)
    end

    if not transparency then
        Settings.SetTransparency(0)
    end

    -- enabled is a boolean value, so need to check if its initialized without "not"
    if enabled == nil then
        Settings.SetEnabled(true)
    end
end

function Settings.GetHatId()
    return hatid
end

function Settings.GetHeight()
    return height
end

function Settings.GetTransparency()
    return transparency
end

function Settings.GetEnabled()
    return enabled
end

function Settings.SetHatId(newHatid)
    hatid = newHatid
    _G.plugin_990908723:SetSetting("HatID", newHatid)
end

function Settings.SetHeight(newHeight)
    height = newHeight
    _G.plugin_990908723:SetSetting("Height", newHeight)
end

function Settings.SetTransparency(newTransparency)
    transparency = newTransparency
    _G.plugin_990908723:SetSetting("Transparency", newTransparency)
end

function Settings.SetEnabled(newEnabled)
    enabled = newEnabled
    _G.plugin_990908723:SetSetting("Enabled", newEnabled)
end

return Settings]]></ProtectedString>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX5D32C69544CF47EE85D82C418F844961">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">changeproperty</string>
					<string name="ScriptGuid">{974936E7-5CA0-4130-B1D9-1F589C4A12AA}</string>
					<ProtectedString name="Source"><![CDATA[-- changes properties of the plugin and updates settings and guis accordingly

local ChangeProperty = {}

local Gui = require(script.Parent.gui)
local Settings = require(script.Parent.settings)
local HatUpdate = require(script.Parent.hatupdate)

local InsertService = game:GetService("InsertService")

function ChangeProperty.ChangeHat(hatId)
    -- if success returns true and hat is non nil, the id corresponds to a hat. if it doesn't, set the id back to the previous hat
    local success, hat = pcall(function()
        local hat = InsertService:LoadAsset(tonumber(hatId)):FindFirstChildOfClass("Accessory")
        return hat
    end)

    if success and hat then
        Settings.SetHatId(hatId)
        HatUpdate.UpdateHat(hat)
    else
        Gui.TextboxHatID:SetValue(Settings.GetHatId())
    end
end

function ChangeProperty.ChangeHeight(height)
	if tonumber(height) then
        Settings.SetHeight(height)
    else
        Gui.TextboxHeight:SetValue(Settings.GetHeight())
	end
end

function ChangeProperty.ChangeTransparent(visible)
    local transparency = visible and 0 or 1
    Settings.SetTransparency(transparency)
end

function ChangeProperty.ChangeEnabled(state)
    Settings.SetEnabled(state)
    
	if state then
        HatUpdate.Connect()
    else
        HatUpdate.Disconnect()
	end
end

Gui.TextboxHatID:GetFrame().Wrapper.TextBox.FocusLost:Connect(function()
	ChangeProperty.ChangeHat(Gui.TextboxHatID:GetValue())
end)
Gui.TextboxHeight:GetFrame().Wrapper.TextBox.FocusLost:Connect(function()
	ChangeProperty.ChangeHeight(Gui.TextboxHeight:GetValue())
end)
Gui.CheckboxEnabled:SetValueChangedFunction(ChangeProperty.ChangeEnabled)
Gui.CheckboxTransparency:SetValueChangedFunction(ChangeProperty.ChangeTransparent)

return ChangeProperty]]></ProtectedString>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX489878B4BA6F459D846320FBAE2B8907">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">hatupdate</string>
					<string name="ScriptGuid">{FF509906-F14F-4154-A144-7871DCF28785}</string>
					<ProtectedString name="Source"><![CDATA[local Settings = require(script.Parent.settings)
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local HatUpdate = {}

HatUpdate._connection = nil
HatUpdate.CurrentHat = nil
HatUpdate.Folder = nil

local defaultfolder = (function()
	local folder = Instance.new("SunRaysEffect") -- i like the icon, it's easily recongnizable as something the person didn't put in the workspace
	folder.Name = "PlayerHats"
	
	folder.Enabled = false
	folder.Intensity = 0
	folder.Spread = 0
	
	return folder
end)()

local function makeFolder()
	local folder = defaultfolder:Clone()
	folder.Archivable = false
	folder.Parent = workspace
	folder.Name = Players.LocalPlayer.Name.."'s hats"
    HatUpdate.Folder = folder
	return folder
end

local function findFolder()
	if not HatUpdate.Folder then
		makeFolder()
	elseif HatUpdate.Folder.Parent ~= workspace then
		HatUpdate.Folder.Parent = workspace
	end
	return HatUpdate.Folder
end

local function findHat()
	if (not HatUpdate.CurrentHat) or (not HatUpdate.CurrentHat:FindFirstChildOfClass("Part")) then
		require(script.Parent.changeproperty).ChangeHat(Settings.GetHatId()) -- equivalent to a makeHat() function
	elseif HatUpdate.CurrentHat ~= HatUpdate.Folder then
		HatUpdate.CurrentHat.Parent = HatUpdate.Folder
	end
	return HatUpdate.CurrentHat
end

function HatUpdate.GetHatPart()
	return findHat():FindFirstChildOfClass("Part")
end

local function moveHat()
    findFolder()
	HatUpdate.GetHatPart().LocalTransparencyModifier = Settings.GetTransparency()
    HatUpdate.GetHatPart().CFrame = workspace.CurrentCamera.CFrame + Vector3.new(0, Settings.GetHeight(), 0)
end

function HatUpdate.UpdateHat(hat)
    if HatUpdate.CurrentHat then
        HatUpdate.CurrentHat:Destroy()
    end

    HatUpdate.CurrentHat = hat
    HatUpdate.CurrentHat.Archivable = false
    HatUpdate.CurrentHat.Handle.Locked = true
    HatUpdate.CurrentHat.Parent = findFolder()

    local handle = hat:FindFirstChildOfClass("Part")
    handle.LocalTransparencyModifier = Settings.GetTransparency()

    local attachment = handle:FindFirstChildOfClass("Attachment")
    if attachment then
        attachment:Destroy()
    end
end

function HatUpdate.Connect()
    HatUpdate._connection = RunService.RenderStepped:Connect(moveHat)
end

function HatUpdate.Disconnect()
    HatUpdate._connection:Disconnect()
	findHat():Destroy()
	HatUpdate.CurrentHat = nil
	findFolder():Destroy()
	HatUpdate.Folder = nil
end

return HatUpdate]]></ProtectedString>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
	</Item>
</roblox>